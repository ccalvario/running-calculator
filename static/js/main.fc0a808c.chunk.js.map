{"version":3,"sources":["components/DisplayTime.js","components/DisplayDistance.js","components/Board.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DisplayTime","e","value","target","hours","Math","floor","this","props","time","minutes","isNaN","Number","onChange","seconds","_this","hoursInput","react_default","a","createElement","type","className","placeholder","handleHoursChange","maxLength","showHours","handleMinutesChange","handleSecondsChange","Component","DisplayDistance","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","distance","setState","_this2","handleDistanceChange","Board","pace","newTime","calculatePace","console","log","newPace","calculateTime","newDistance","reactstrap_es","xs","src_components_DisplayDistance","src_components_DisplayTime","handleTimeChange","handlePaceChange","Header","App","src_components_Header","src_components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc0a808c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './DisplayTime.css';\n\nclass DisplayTime extends Component {\n\n    handleSecondsChange(e) {\n        let value = e.target.value;\n        const hours =  Math.floor(this.props.time  / 3600);\n        const minutes = Math.floor(this.props.time % 3600 / 60);\n        //const seconds = Math.floor(this.props.time % 3600 % 60);\n        if(isNaN(value)) {\n            return;\n        }\n        let time = Number(hours * 3600) + Number(minutes * 60) + Number(value);\n        this.props.onChange(time);\n    }\n\n    handleMinutesChange(e) {\n        const hours =  Math.floor(this.props.time  / 3600);\n        //const minutes = Math.floor(this.props.time % 3600 / 60);\n        const seconds = Math.floor(this.props.time % 3600 % 60);\n        const value = e.target.value;\n        if(isNaN(value)) {\n            return;\n        }\n        let time = Number(hours * 3600) + Number(value * 60) + Number(seconds);\n        this.props.onChange(time);\n    }\n\n    handleHoursChange(e) {\n        //const hours =  Math.floor(this.props.time  / 3600);\n        const minutes = Math.floor(this.props.time % 3600 / 60);\n        const seconds = Math.floor(this.props.time % 3600 % 60);\n        const value = e.target.value;\n        if(isNaN(value)) {\n            return;\n        }\n        let time = value * 3600 + minutes * 60 + seconds;\n        this.props.onChange(time);\n    }\n\n    render() {\n        const hours =  Math.floor(this.props.time  / 3600);\n        const minutes = Math.floor(this.props.time % 3600 / 60);\n        const seconds = Math.floor(this.props.time % 3600 % 60);\n        \n        let hoursInput = <input type=\"text\" className=\"form-control display-time\"\n                            placeholder=\"0\"\n                            onChange={(e) => this.handleHoursChange(e)}\n                            value={hours}\n                            maxLength=\"2\" />;\n\n        return (\n            <div className=\"display\">\n                <div>\n                    <div className=\"display-label\">\n                        {this.props.showHours ? <div>H</div> : null}\n                        <div>M</div>\n                        <div>S</div>\n                    </div>\n\n                </div>\n                <div>\n                    <div className=\"display-row\">\n                        {this.props.showHours ? hoursInput : null}\n                        <input type=\"text\" className=\"form-control display-time\"\n                            placeholder=\"0\"\n                            onChange={(e) => this.handleMinutesChange(e)}\n                            value={minutes} \n                            maxLength=\"2\"/>\n                        <input type=\"text\" className=\"form-control display-time\"\n                            placeholder=\"0\"\n                            onChange={(e) => this.handleSecondsChange(e)}\n                            value={seconds}\n                            maxLength=\"2\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DisplayTime;","import React, {Component} from 'react';\nimport './DisplayDistance.css';\n\nclass DisplayDistance extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            distance: props.distance,\n        };\n    }\n\n    handleDistanceChange(e) {\n        const value = e.target.value;\n        if(!isNaN(value)) {\n            this.setState({\n                distance: value,\n            })\n        }\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" className=\"form-control display-distance\"\n                    placeholder=\"0\"\n                    onChange={(e) => this.handleDistanceChange(e)}\n                    value={this.state.distance} />\n            </div>\n        );\n    }\n}\n\nexport default DisplayDistance;","import React, {Component} from 'react';\nimport DisplayTime from './DisplayTime';\nimport DisplayDistance from './DisplayDistance';\nimport './Board.css';\nimport { Container, Row, Col } from 'reactstrap';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            distance: 5000,\n            time: 0,\n            pace: 0,\n        }\n    }\n\n    calculatePace(distance, time){\n        return time * 1000 / distance;\n        \n    }\n\n    calculateTime(distance, pace) {\n        return distance * pace / 1000;\n    }\n\n    handleTimeChange(time){\n        const newTime = time;\n\n        if(!isNaN(newTime)) {\n            this.setState({\n                time: newTime,\n                pace: this.calculatePace(this.state.distance, newTime),\n            });\n        }\n        console.log(\"****handleTimeChange \" + time);\n    }\n\n    handlePaceChange(pace) {\n        const newPace = pace;\n        if(!isNaN(newPace)) {\n            this.setState({\n                pace: newPace,\n                time: this.calculateTime(this.state.distance, newPace),\n            });\n        }\n        console.log(\"****handlePaceChange \" + pace);\n    }\n\n    handleDistanceChange(distance) {\n        const newDistance = distance;\n        if(!isNaN(newDistance)) {\n            this.setState({\n                distance: newDistance,\n                pace: this.calculatePace(newDistance, this.state.time),\n            });\n        }\n    }\n\n    render() {\n        \n        return (\n            \n            <Container className=\"board\">\n                <Row>\n                    <Col xs=\"4\" className=\"label\">\n                        Distance:\n                    </Col>\n                    <Col xs=\"auto\">\n                        <DisplayDistance\n                            distance={this.state.distance}\n                            onChange={(e) => this.handleDistanceChange(e)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs=\"4\" className=\"label\">\n                        Time:\n                    </Col>\n                    <Col xs=\"auto\">\n                        <DisplayTime\n                            time={this.state.time}\n                            showHours={true}\n                            onChange={(e) => this.handleTimeChange(e)}\n                        />\n                    </Col>                    \n                </Row>\n                <Row>\n                    <Col xs=\"4\" className=\"label\">\n                        Pace:\n                    </Col>\n                    <Col xs=\"auto\">\n                        <DisplayTime\n                            time={this.state.pace}\n                            showHours={false}\n                            onChange={(e) => this.handlePaceChange(e)}\n                        />\n                    </Col>                   \n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => (\n    <nav className=\"header\">\n        <div className=\"title\">Running Calculator</div>\n    </nav>\n);\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Header from './components/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}