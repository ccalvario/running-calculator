{"version":3,"sources":["components/DisplayTime.js","components/DisplayDistance.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["DisplayTime","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hours","Math","floor","time","minutes","seconds","console","log","state","e","value","target","isNaN","setState","Number","onChange","_this2","react_default","a","createElement","type","className","placeholder","handleHoursChange","handleMinutesChange","handleSecondsChange","Component","DisplayDistance","distance","handleDistanceChange","Board","pace","newTime","calculatePace","newPace","calculateTime","newDistance","components_DisplayDistance","components_DisplayTime","handleTimeChange","handlePaceChange","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbdee13a.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass DisplayTime extends Component {\n    constructor(props) {\n        super(props);\n        const hours =  Math.floor(props.time  / 3600);\n        const minutes = Math.floor(props.time % 3600 / 60);\n        const seconds = Math.floor(props.time % 3600 % 60);\n        console.log(\"display cosnt \" + props.time);\n        this.state = {\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n        }\n    }\n\n    handleSecondsChange(e) {\n        const value = e.target.value;\n        if(!isNaN(value)) {\n            this.setState({\n                seconds: value,\n            })\n        }\n        let time = Number(this.state.hours * 3600) + Number(this.state.minutes * 60) + Number(value);\n        console.log(\"display \" + time);\n        this.props.onChange(time);\n    }\n\n    handleMinutesChange(e) {\n        const value = e.target.value;\n        if(!isNaN(value)) {\n            this.setState({\n                minutes: value,\n            })\n        }\n        let time = Number(this.state.hours * 3600) + Number(value * 60) + Number(this.state.seconds);\n        this.props.onChange(time);\n    }\n\n    handleHoursChange(e) {\n        const value = e.target.value;\n        if(!isNaN(value)) {\n            this.setState({\n                hours: value,\n            })\n        }\n        let time = value * 3600 + this.state.minutes * 60 + this.state.seconds;\n        this.props.onChange(time);\n    }\n\n    render() {\n        const hours =  Math.floor(this.props.time  / 3600);\n        const minutes = Math.floor(this.props.time % 3600 / 60);\n        const seconds = Math.floor(this.props.time % 3600 % 60);\n        return (\n            <div>\n                <input type=\"number\" className=\"form-control\"\n                    placeholder=\"0\"\n                    onChange={(e) => this.handleHoursChange(e)}\n                    value={hours} />\n                <input type=\"number\" className=\"form-control\"\n                    placeholder=\"0\"\n                    onChange={(e) => this.handleMinutesChange(e)}\n                    value={minutes} />\n                <input type=\"number\" className=\"form-control\"\n                    placeholder=\"0\"\n                    onChange={(e) => this.handleSecondsChange(e)}\n                    value={seconds} />\n            </div>\n        );\n    }\n\n}\n\nexport default DisplayTime;","import React, {Component} from 'react';\n\nclass DisplayDistance extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            distance: props.distance,\n        };\n    }\n\n    handleDistanceChange(e) {\n        const value = e.target.value;\n        if(!isNaN(value)) {\n            this.setState({\n                distance: value,\n            })\n        }\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (\n            <div>\n                <input type=\"number\" className=\"form-control\"\n                    placeholder=\"0\"\n                    onChange={(e) => this.handleDistanceChange(e)}\n                    value={this.state.distance} />\n            </div>\n        );\n    }\n}\n\nexport default DisplayDistance;","import React, {Component} from 'react';\nimport DisplayTime from './DisplayTime';\nimport DisplayDistance from './DisplayDistance';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            distance: 5000,\n            time: 0,\n            pace: 0,\n        }\n    }\n\n    calculatePace(distance, time){\n        return time * 1000 / distance;\n        \n    }\n\n    calculateTime(distance, pace) {\n        return distance * pace / 1000;\n    }\n\n    handleTimeChange(time){\n        const newTime = time;\n        console.log(newTime);\n\n        if(!isNaN(newTime)) {\n            this.setState({\n                time: newTime,\n                pace: this.calculatePace(this.state.distance, newTime),\n            });\n        } \n    }\n\n    handlePaceChange(pace) {\n        const newPace = pace;\n        if(!isNaN(newPace)) {\n            this.setState({\n                pace: newPace,\n                time: this.calculateTime(this.state.distance, newPace),\n            });\n        }\n    }\n\n    handleDistanceChange(distance) {\n        const newDistance = distance;\n        if(!isNaN(newDistance)) {\n            this.setState({\n                distance: newDistance,\n                pace: this.calculatePace(newDistance, this.state.time),\n            });\n        }\n    }\n\n    render() {\n        \n        return (\n            <div>\n                <p>Distance: </p>\n                <DisplayDistance\n                distance={this.state.distance}\n                onChange={(e) => this.handleDistanceChange(e)}\n                />\n                <p>Time: </p>\n                <DisplayTime\n                time={this.state.time}\n                onChange={(e) => this.handleTimeChange(e)}\n                />\n                <p>Pace: {this.state.pace}</p>\n                <DisplayTime\n                time={this.state.pace}\n                onChange={(e) => this.handlePaceChange(e)}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Board />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}